--List of quotes to choose from for alpha greeter.
return {
    {"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.", '', '- Brian Kernighan'},
    {'Adapting old programs to fit new machines usually means adapting new machines to behave like old ones.', '', '- Alan Perlis'},
    {'Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.', '', '- Alan Perlis'},
    {'It is easier to change the specification to fit the program than vice versa.', '', '- Alan Perlis'},
    {'Simplicity does not precede complexity, but follows it.', '', '- Alan Perlis'},
    {'Optimization hinders evolution.', '', '- Alan Perlis'},
    {'It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.', '', '- Alan Perlis'},
    {'There is nothing quite so useless as doing with great efficiency something that should not be done at all.', '', '- Peter Drucker'},
    {"If you don't fail at least 90% of the time, you're not aiming high enough.", '', '- Alan Kay'},
    {'I think a lot of new programmers like to use advanced data structures and advanced language features as a way of demonstrating their ability. I call it the lion-tamer syndrome. Such demonstrations are impressive, but unless they actually translate into real wins for the project, avoid them.', '', '- Glyn Williams'},
    {'If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual.'},
    {"The computing scientist's main challenge is not to get confused by the complexities of his own making.", '', '- Edsger W. Dijkstra'},
    {'A good programmer is someone who always looks both ways before crossing a one-way street.', '', '- Doug Linder'},
    {'Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.', '', '- John Woods'},
    {'Unix was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things.'},
    {'Contrary to popular belief, Unix is user friendly. It just happens to be very selective about who it decides to make friends with.'},
    {'Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.'},
    {'There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies.', '', '- C.A.R. Hoare'},
    {"If you don't make mistakes, you're not working on hard enough problems.", '', '- Frank Wilczek'},
    {"If you don't start with a spec, every piece of code you write is a patch.", '', '- Leslie Lamport'},
    {'Abstraction is not about vagueness, it is about being precise at a new semantic level.', '', '- Edsger W. Dijkstra'},
    {'Fancy algorithms are slow when n is small, and n is usually small.', '', '- Rob Pike'},
    {'Care about your craft.', '', 'Why spend your life developing software unless you care about doing it well?'},
    {"Provide options, don't make lame excuses.", '', "Instead of excuses, provide options. Don't say it can't be done; explain what can be done."},
    {'Be a catalyst for change.', '', "You can't force change on people. Instead, show them how the future might be and help them participate in creating it."},
    {'Critically analyze what you read and hear.', '', "Don't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project."},
    {"DRY - Don't Repeat Yourself.", '', 'Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.'},
    {'Eliminate effects between unrelated things.', '', 'Design components that are self-contained, independent, and have a single, well-defined purpose.'},
    {'Use the power of command shells.', '', "Use the shell when graphical user interfaces don't cut it."},
    {'Always use source code control.', '', 'Source code control is a time machine for your work - you can go back.'},
    {"Don't assume it - prove it.", '', 'Prove your assumptions in the actual environment - with real data and boundary conditions.'},
    {'Write code that writes code.', '', 'Code generators increase your productivity and help avoid duplication.'},
    {'Use assertions to prevent the impossible.', '', 'Assertions validate your assumptions. Use them to protect your code from an uncertain world.'},
    {'Finish what you start.', '', 'Where possible, the routine or object that allocates a resource should be responsible for deallocating it.'},
    {'Estimate the order of your algorithms.', '', 'Get a feel for how long things are likely to take before you write code.'},
    {'Refactor early, refactor often.', '', 'Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.'},
    {"Don't think outside the box - find the box.", '', 'When faced with an impossible problem, identify the real constraints. Ask yourself: "Does it have to be done this way? Does it have to be done at all?"'},
    {'Some things are better done than described.', '', "Don't fall into the specification spiral - at some point you need to start coding."},
    {"Costly tools don't produce better designs.", '', 'Beware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits.'},
    {"Don't use manual procedures.", '', 'A shell script or batch file will execute the same instructions, in the same order, time after time.'},
    {"Coding ain't done 'til all the Tests run.", '', "'Nuff said."},
    {'Test state coverage, not code coverage.', '', "Identify and test significant program states. Just testing lines of code isn't enough."},
    {'English is just a programming language.', '', 'Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.'},
    {"Gently exceed your users' expectations.", '', "Come to understand your users' expectations, then deliver just that little bit more."},
    {'Think about your work.', '', 'Turn off the autopilot and take control. Constantly critique and appraise your work.'},
    {"Don't live with broken windows.", '', 'Fix bad designs, wrong decisions, and poor code when you see them.'},
    {'Remember the big picture.', '', "Don't get so engrossed in the details that you forget to check what's happening around you."},
    {'Make it easy to reuse.', '', "If it's easy to reuse, people will. Create an environment that supports reuse."},
    {'Prototype to learn.', '', 'Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.'},
    {'Estimate to avoid surprises.', '', "Estimate before you start. You'll spot potential problems up front."},
    {'Use a single editor well.', '', 'The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.'},
    {'Use exceptions for exceptional problems.', '', 'Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.'},
    {'Minimize coupling between modules.', '', 'Avoid coupling by writing "shy" code and applying the Law of Demeter.'},
    {'Put abstractions in code, details in metadata.', '', 'Program for the general case, and put the specifics outside the compiled code base.'},
    {"Don't program by coincidence.", '', "Rely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan."},
    {'Design to test.', '', 'Start thinking about testing before you write a line of code.'},
    {'Use a project glossary.', '', 'Create and maintain a single source of all the specific terms and vocabulary for a project.'},
    {"Start when you're ready.", '', "You've been building experience all your life. Don't ignore niggling doubts."},
    {'Test early. Test often. Test automatically.', '', 'Tests that run with every build are much more effective than test plans that sit on a shelf.'},
    {'Sign your work.', '', 'Craftsmen of an earlier age were proud to sign their work. You should be, too.'},
    {'Think twice, code once.'},
    {'No matter how far down the wrong road you have gone, turn back now.'},
    {'Why do we never have time to do it right, but always have time to do it over?'},
    {'Weeks of programming can save you hours of planning.'},
    {'To iterate is human, to recurse divine.', '', '- L. Peter Deutsch'},
    {'Computers are useless. They can only give you answers.', '', '- Pablo Picasso'},
    {'The question of whether computers can think is like the question of whether submarines can swim.', '', '- Alan Turing'},
    {"I've finally learned what \"upward compatible\" means. It means we get to keep all our old mistakes.", '', '- Dennie van Tassel'},
    {'Controlling complexity is the essence of computer programming.', '', '- Brian Kernighan'},
    {'Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges, and it causes end-user and administrator frustration.', '', '- Ray Ozzie'},
    {'The function of good software is to make the complex appear to be simple.', '', '- Grady Booch'},
    {"There's an old story about the person who wished his computer were as easy to use as his telephone. That wish has come true, since I no longer know how to use my telephone.", '', '- Bjarne Stroustrup'},
    {'Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.', '', '- Larry Wall'},
    {'First, solve the problem. Then, write the code.', '', '- John Johnson'},
    {'Measuring programming progress by lines of code is like measuring aircraft building progress by weight.', '', '- Bill Gates'},
    {"Don't worry if it doesn't work right. If everything did, you'd be out of a job.", '', "- Mosher's Law of Software Engineering"},
    {'Functions delay binding; data structures induce binding. Moral: Structure data late in the programming process.', '', '- Alan J. Perlis'},
    {'Easy things should be easy and hard things should be possible.', '', '- Larry Wall'},
    {'Nothing is more permanent than a temporary solution.'},
    {"If you can't explain something to a six-year-old, you really don't understand it yourself.", '', '- Albert Einstein'},
    {'Software is hard.', '', '- Donald Knuth'},
    {'They did not know it was impossible, so they did it!', '', '- Mark Twain'},
    {'The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.', '', '- Paul Graham'},
    {'Question: How does a large software project get to be one year late?', 'Answer: One day at a time!'},
    {'The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.', '', '- Tom Cargill'},
    {'If debugging is the process of removing bugs, then programming must be the process of putting them in.', '', '- Edsger W. Dijkstra'},
    {'640K ought to be enough for anybody.', '', '- Bill Gates, 1981'},
    {'To understand recursion, one must first understand recursion.', '', '- Stephen Hawking'},
    {'Developing tolerance for imperfection is the key factor in turning chronic starters into consistent finishers.', '', '- Jon Acuff'},
    {'Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.', '', '- Patrick McKenzie'},
    {"The average user doesn't give a damn what happens, as long as (1) it works and (2) it's fast.", '', '- Daniel J. Bernstein'},
    {'Be curious. Read widely. Try new things. I think a lot of what people call intelligence boils down to curiosity.', '', '- Aaron Swartz'},
    {'What one programmer can do in one month, two programmers can do in two months.', '', '- Frederick P. Brooks'},
    {'There may be more beautiful times, but this one is ours','','- Jean Paul Sartre'},
    {'The love that you withold is the pain that you carry','','- Ralph W. Emerson'},
    {'Shuzan held out his short staff and said:','','"If you call this a short staff, you oppose its reality. If you do not call it a short staff, you ignore the fact.','','Now what do you wish to call this?"'},
    {"Life isn't a problem to solve, but a reality to experience","","- Frank Herbert"},
    {"If you do not invite the whole,","the demon takes two chairs.","And your art suffers.","","- Master Eiji"}
}
